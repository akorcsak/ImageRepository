@*@model IEnumerable<ShopifyBackEndApp.Models.AccountImagesModel>*@
@using System.Web.UI.WebControls;

@{

    if (Session["User"] != null)
    {
        <div style="padding-top: 100px;">
            <div class="jumbotron" style="height:800px">
                <div class="ex2">
                    @{
                        string userName = (string)Session["User"];
                        string[] filePaths = Directory.GetFiles(Server.MapPath("~/Images/" + userName));
                        List<ListItem> files = new List<ListItem>();
                        foreach (string filePath in filePaths)
                        {
                            string fileName = Path.GetFileName(filePath);
                            files.Add(new ListItem(fileName, "~/Images/" + fileName));
                            WebImage.GetImageFromRequest();

                            <div style="margin-bottom: 25px;" class="col-md-4" @*style="float: left; display: inline-block;"*@>

                                <img src="/images/@userName/@fileName" style="width: 300px; height:300px" />
                                <div>@fileName</div>

                            </div>


                        }
                    }
                </div>


            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <h2>Upload Photos</h2>

                <div id="drop-area">
                    <form class="my-form">
                        <p>Upload multiple files with the file dialog or by dragging and dropping images onto the dashed region</p>
                        <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
                        <div style="display:inline-block; margin-right:10px;">
                            <label class="button" for="fileElem">Select some files</label>
                        </div>
                        <div style="display:inline-block;">
                            <input id="upload" type="submit" value="Upload" disabled>
                        </div>
                    </form>
                    <progress id="progress-bar" max=100 value=0></progress>

                    <div id="gallery"></div>
                </div>




            </div>


            <div class="col-md-6">
                <h2>Delete Images</h2>
                <div class="jumbotron" style="padding-top: 15px; padding-bottom: 15px">
                    <div style="padding: 12px; padding-bottom: 0px">
                        <input type="checkbox" style="margin-right: 15px" id="select_all" name="select_all"> <b>Select All</b> <br />
                    </div>
                    <br />
                    <div class="ex1">
                        @foreach (string filePath in filePaths)
                        {
                            string fileName = Path.GetFileName(filePath);
                            files.Add(new ListItem(fileName, "~/Images/" + fileName));
                            WebImage.GetImageFromRequest();

                            <input type="checkbox" style="margin-right: 15px" id="@fileName"  name="chk" value="@fileName" onclick="verifyCheckboxes()">@fileName <br />


                        }
                    </div>
                    <br />

                    <form>
                        <input type="submit" id="delete" value="Delete" onclick="deleteImages()" disabled>
                    </form>
                </div>

            </div>
        </div>

    }

    else
    {
        Layout = null;
        Response.Redirect("~/Login/LoginPage");
    }
}



<script>
    let dropArea = document.getElementById('drop-area')
        ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false)
        })

    function preventDefaults(e) {
        e.preventDefault()
        e.stopPropagation()
    }

    ;['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
    })

        ;['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false)
        })

    function highlight(e) {
        dropArea.classList.add('highlight')
    }

    function unhighlight(e) {
        dropArea.classList.remove('highlight')
    }

    dropArea.addEventListener('drop', handleDrop, false)

    function handleDrop(e) {
        let dt = e.dataTransfer
        let files = dt.files

        handleFiles(files)
    }

    function previewFile(file) {
        let reader = new FileReader()
        reader.readAsDataURL(file)
        reader.onloadend = function () {
            let img = document.createElement('img')
            img.src = reader.result
            console.log(file);
            document.getElementById('gallery').appendChild(img)
            document.getElementById('upload').disabled = false;
        }
    }

    let uploadProgress = []
    let progressBar = document.getElementById('progress-bar')

    function initializeProgress(numFiles) {
        progressBar.value = 0
        uploadProgress = []

        for (let i = numFiles; i > 0; i--) {
            uploadProgress.push(0)
        }
    }

    function updateProgress(fileNumber, percent) {
        uploadProgress[fileNumber] = percent
        let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length
        progressBar.value = total
    }


    function handleFiles(files) {
        files = [...files]
        console.log(files)
        initializeProgress(files.length) // <- Add this line
        files.forEach(uploadFile)
        files.forEach(previewFile)
    }

    function uploadFile(file, i) { // <- Add `i` parameter
        var url = '/Home/Index/';
        var xhr = new XMLHttpRequest()
        var formData = new FormData()
        xhr.open('POST', url, true)

        // Add following event listener
        xhr.upload.addEventListener("progress", function (e) {
            updateProgress(i, (e.loaded * 100.0 / e.total) || 100)
        })

        xhr.addEventListener('readystatechange', function (e) {
            if (xhr.readyState == 4 && xhr.status == 200) {

                // Done. Inform the user
            }
            else if (xhr.readyState == 4 && xhr.status != 200) {
                // Error. Inform the user
            }
        })

        formData.append('file', file)


        xhr.send(formData)
    }

        
    document.getElementById('select_all').onclick = function() {
        var checkboxes = document.getElementsByName('chk');
        for (var checkbox of checkboxes) {
            checkbox.checked = this.checked;
        }
        const cb = document.getElementById('select_all')
        if (cb.checked) {
            document.getElementById("delete").disabled = false;
        }
        else {
            document.getElementById("delete").disabled = true;
        }
    }

    function verifyCheckboxes() {
        var numbCheck = false;
        var checkboxes = document.getElementsByName('chk');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                numbCheck = true;
            }
        }

        if (numbCheck) {
            document.getElementById("delete").disabled = false;
        }
        else {
            document.getElementById("delete").disabled = true;
        }

    }


    function deleteImages() {
        var fileList = [];
        var checkboxes = document.getElementsByName('chk');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                fileList.push(checkbox.value);
            }
        }

        $.ajax({
            type: "POST",
            url: "/Home/DeleteFiles/",
            data: { fileName: fileList },
            success: function (result) {
                console.log("Succesful!")
            }
        })
    }

</script>
